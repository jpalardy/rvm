%h1
  Named Gem Sets
%p
  rvm gives you compartmentalized independent ruby setups.
  This means that ruby, gems, irb are all separate and self contained from system and from each other.
%p
  You may even have separate named gem sets.
%p
  Let's say, for example, that you are testing two versions of a gem with ruby 1.9.1.
  you can install one to the default 1.9.1 and you can create a named gem set for the other version and switch between them easily.
%h3
  Example: testing gems
%pre.code
  :preserve
    rvm 1.9.1%testing
%p
  will use a '1.9.1%testing' gems dir, whereas:
%pre.code
  :preserve
    rvm 1.9.1
%p
  use the normal 1.9.1 gems dir :)
%h3
  Example: Rails versions & upgrading apps
%p
  To illustrate the point let's talk about a common use case. Let us assume that we are testing out a rails application in order to upgrade it to the latest Rails from a previous version.  rvm makes such testing very easy as it lets you quickly switch between multiple rails versions. First let us set up the environments.
%pre.code
  :preserve
    rvm 1.9.1
    gem install rails # 2.3.3

    rvm 1.9.1%rails222
    gem install rails -v 2.2.2

    rvm 1.8.7%rails126
    gem install rails -v 1.2.6

    rvm 1.8.7
    gem install rails -v 1.2.3
%p
  Note that above on each ruby installs you can have a completely separate versions!
  Now that our environments are setup switching between rails versions and ruby versions is quite simple:
%pre.code
  :preserve
    ∴ rvm 1.8.7%rails126 ; rails --version

    Rails 1.2.6

    ∴ rvm 1.8.7 ; rails --version

    Rails 1.2.3

    ∴ rvm 1.9.1%rails220 ; rails --version

    Rails 2.2.0

    ∴ rvm 1.9.1 ; rails --version

    Rails 2.3.3
%h2
  Warning!!!
%p
  * rvm gives you a separate gem directory for each and every ruby version and gem set.*
  What this means is that gems will have to explicitly installed for each revision and gem set.
%p
  Although I recommend against using it, if you are sure you can use 'rvm gemdup default' and 'rvm gemdup system' to clone user default gems and system gems respectively.
%h2
  Gem Sets with passenger
%p
  Documented on the
  %a{ :href => "/passenger/" }
    page

%a{ :name => "managing" }
%h2
  Managing gem sets
%p
  We can not only use completely separate gem sets per application/project/etc... we can also dump and load them easily.
%p
  To switch to a gem set
%pre.code
  :preserve
    ∴ rvm gems albinochipmunk

%p
  To obtain the name of the currently selected gem set
%pre.code
  :preserve
    ∴ rvm gems albinochipmunk ; rvm gems name
    albinochipmunk

%p
  To obtain the full path to the directory for the currently selected gem set:
%pre.code
  :preserve
    ∴ rvm gems albinochipmunk; rvm gems dir
    /Users/wayne/.rvm/gems/ruby/1.9.1%albinochipmunk

%p
  To dump a gem set easily, assuming a project called 'albinochipmunk' running on Ruby 1.9.1:
%pre.code
  :preserve
    ∴ rvm 1.9.1%albinochipmunk dump
%p
  will create an 'albinochipmunk.gemset' file.
%p
  Alternatively, if you already have a ruby selected
%pre.code
  :preserve
    rvm gems dump
%p
  You can specify the gemset filename prefix also
%pre.code
  :preserve
    rvm gems dump albinochipmunk.gems
%p
  A subtle difference with the above command is to leave off the '.gems' which will dump the gems for the gemset named 'mygemsetname'
%pre.code
  :preserve
    rvm gems dump albinochipmunk
%h3
  Loading a gem set
%p
  To load this gem set simply do:
%pre.code
  :preserve
    ∴ rvm 1.9.1%albinochipmunk load
%p
  Note that you can use any gem set name to load into.
%p
  Alternatively, if you already have a ruby selected:
%pre.code
  :preserve
    rvm gems load
%p
  You can specify the gemset filename prefix also
%pre.code
  :preserve
    rvm gems dump albinochipmunk

%p
  You can delete a gem set (the --force makes it not prompt you :) )
%pre.code
  :preserve
    rvm gems albinochipmunk ; rvm --force gems delete albinochipmunk"

%p
  Loading without arguments first checks for a gemset file with the current gem set name prefix, then checks for 'default.gems' and finally looks for a 'system.gems'.
%pre.code
  :preserve
    rvm gems albinochipmunk ; rvm gems load # will look for albinochipmunk.gems first, then default.gems and finally system.gems

%p
  To get a list of all named gem sets for the current ruby interpreter / version
%pre.code
  :preserve
    rvm gems list

%p
  To use a named gem set with a rvm multi action, append it to the ruby selector string using a '%'
%pre.code
  :preserve
    rvm 1.9.1%albinochipmunk,ree%albinochipmunk,jruby%albinochipmunk rake test

%p
  Alternatively and with less typing this should also work to use 'albinochipmunk' gem set for each interpreter
%pre.code
  :preserve
    rvm gems albinochipmunk ; rvm 1.9.1,ree,jruby rake test

